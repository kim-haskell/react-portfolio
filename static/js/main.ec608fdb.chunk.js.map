{"version":3,"sources":["components/About_Me.png","components/Navbar.js","components/Home.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","Home","src","About_Me","alt","Footer","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,sC,yMC0B5BC,MAtBf,WAEI,OAEQ,yBAAKC,UAAU,oDACf,2CACA,4BAAQA,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,qBAC5K,0BAAMN,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BO,GAAG,sBAC3C,yBAAKP,UAAU,cACb,uBAAGA,UAAU,2BAA2BQ,KAAM,KAA9C,SAAyD,0BAAMR,UAAU,WAAhB,cACzD,uBAAGA,UAAU,oBAAoBQ,KAAM,cAAvC,aACA,uBAAGR,UAAU,oBAAoBQ,KAAK,aAAtC,e,sBCSDC,MAtBf,WAEI,OACC,yBAAKT,UAAU,aACf,yBAAKA,UAAU,kBAChB,yBAAKA,UAAU,YACb,yBAAKU,IAAKC,IAAUX,UAAU,WAAWY,IAAI,SAE9C,yBAAKZ,UAAU,YACd,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,aACA,uBAAGA,UAAU,aAAb,0nBCEOa,MAff,WAGI,OAEI,yBAAKb,UAAU,aAEf,4BAAQO,GAAG,iBAAX,+CACA,oDCaOO,G,6KAbb,OAEE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GARYe,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec608fdb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/About_Me.7fbc515e.png\";","import React from \"react\";\n\n\n\nfunction Navbar () {\n    \n    return (\n        \n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-secondary\">\n            <h4>Kim Haskell</h4>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n              <div className=\"navbar-nav\">\n                <a className=\"nav-item nav-link active\" href={\"/\"}>About <span className=\"sr-only\">(current)</span></a>\n                <a className=\"nav-item nav-link\" href={\"/Portfolio\"}>Portfolio</a>\n                <a className=\"nav-item nav-link\" href=\"./Contact\">Contact</a>\n              </div>\n             </div> \n          </nav>\n          \n     );\n    \n}\n\nexport default Navbar;\n","import React from \"react\";\nimport About_Me from \"./About_Me.png\";\nimport \"./styles.css\";\n\nfunction Home () {\n\n    return(\n     <div className=\"card mb-3\">\n     <div className=\"row no-gutters\">\n    <div className=\"col-md-4\">\n      <img src={About_Me} className=\"card-img\" alt=\"...\"></img>\n     </div>\n     <div className=\"col-md-8\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">About Me </h5>\n        <p className=\"card-text\">My name is Kim Haskell and I am a full Stack Web Developer with a background in visual merchandising and management looking to bring in my eye for design to a front-end or full stack web development position. I recently completed a full stack web development program through the University of Denver and learned many technologies such as React, ES6, MySQL, CSS and HTML. I have worked on team projects to develop responsive apps, such as a recipe and cocktail app that used APIs to pull recipes based on inputted ingredients. I hope to utilize my skills and continue to grow as I work to create exciting user web experiences.\n        </p>\n      </div>\n    </div>\n   </div>\n  </div>\n \n )\n}\n\n\nexport default Home;","import React from \"react\";\n\nfunction Footer () {\n\n\n    return(\n\n        <div className=\"col-md-12\">\n\n        <footer id=\"center-footer\">Made with ❤️️ by Kim Haskell</footer> \n        <p>\n             &copy; 2020 Copyright\n        </p>\n      </div>  \n    )\n}\n\nexport default Footer;","import React, { Component} from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport Footer from \"./components/Footer\";\n\nimport './App.css';\n\nclass App extends Component {\n  \n  render () {\n  return (\n  \n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Home />\n      <Footer />\n    </div>\n   \n   \n   );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />,\n \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}